[
    {
        "id": "85d487e8aceafc96",
        "type": "tab",
        "label": "tests - COM5 comms",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5f0d43a9dc0a4da7",
        "type": "tab",
        "label": "test - MQTT comms",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4f13ca8d684be14d",
        "type": "tab",
        "label": "conector API horus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3540c13fef4eaf3c",
        "type": "tab",
        "label": "tests - HTTP requests",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2691da417deca3df",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "497cf184cd8a8026",
        "type": "serial-port",
        "serialport": "COM5",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "82b1f593c0d9937c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ae95c16c123ae6ac",
        "type": "serial out",
        "z": "85d487e8aceafc96",
        "name": "",
        "serial": "497cf184cd8a8026",
        "x": 470,
        "y": 340,
        "wires": []
    },
    {
        "id": "b7dfca507abe7e8c",
        "type": "function",
        "z": "85d487e8aceafc96",
        "name": "ex. payload",
        "func": "msg.payload = \"Hola Arduino!\\n\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "ae95c16c123ae6ac"
            ]
        ]
    },
    {
        "id": "f920a62b231f0d72",
        "type": "inject",
        "z": "85d487e8aceafc96",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "b7dfca507abe7e8c"
            ]
        ]
    },
    {
        "id": "6f58a3fb5a9ff766",
        "type": "serial in",
        "z": "85d487e8aceafc96",
        "name": "",
        "serial": "497cf184cd8a8026",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "fd64d88e14571105"
            ]
        ]
    },
    {
        "id": "fd64d88e14571105",
        "type": "debug",
        "z": "85d487e8aceafc96",
        "name": "input COM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 440,
        "wires": []
    },
    {
        "id": "ab6dca086050ae89",
        "type": "mqtt in",
        "z": "5f0d43a9dc0a4da7",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "82b1f593c0d9937c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 170,
        "y": 480,
        "wires": [
            [
                "c3b685d88a6586e5"
            ]
        ]
    },
    {
        "id": "c3b685d88a6586e5",
        "type": "debug",
        "z": "5f0d43a9dc0a4da7",
        "d": true,
        "name": "mqtt messages",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 480,
        "wires": []
    },
    {
        "id": "a6de8aa0198fe1bf",
        "type": "mqtt out",
        "z": "5f0d43a9dc0a4da7",
        "name": "",
        "topic": "lora-ccic/",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "82b1f593c0d9937c",
        "x": 540,
        "y": 320,
        "wires": []
    },
    {
        "id": "91f64efa885abb14",
        "type": "inject",
        "z": "5f0d43a9dc0a4da7",
        "name": "nodo interior",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "<10009>voltage=225.00&temperature=24.50",
        "payloadType": "str",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "a6de8aa0198fe1bf"
            ]
        ]
    },
    {
        "id": "6a49ce7f08f0dbca",
        "type": "inject",
        "z": "5f0d43a9dc0a4da7",
        "name": "nodo exterior",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "<20009>current=0.65&raindrops=1&gas=123.51/150&lat=-34.57475&lng=58.43552&alt=15",
        "payloadType": "str",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "a6de8aa0198fe1bf"
            ]
        ]
    },
    {
        "id": "708ca09a7db425b7",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "save",
        "func": "const arr = msg.payload.split(\"\\n\").filter((/** @type {string | string[]} */ line) => line.includes(\"=\"));\n\nlet config = {};\narr.forEach((/** @type {string} */ item) => {\n    const lineArr = item.split(\"=\");\n    const key = lineArr[0].trim();\n    const value = lineArr[1].trim();\n    config = {\n        ...config,\n        [key]: value\n    }\n});\n\nglobal.set(\"config\", config);\n\nmsg.payload = global.get(\"config\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "fcc2c15bb1b7c795"
            ]
        ]
    },
    {
        "id": "2d53f511180b9c21",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": ".1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "b090a0b95690d0aa",
                "7ada066df377afec"
            ]
        ]
    },
    {
        "id": "b090a0b95690d0aa",
        "type": "file in",
        "z": "4f13ca8d684be14d",
        "name": "read config.ini",
        "filename": "Desktop/config.ini",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 280,
        "wires": [
            [
                "708ca09a7db425b7"
            ]
        ]
    },
    {
        "id": "6295cfb665a849a5",
        "type": "http request",
        "z": "4f13ca8d684be14d",
        "name": "get http ok",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "9518aa1b3ce9198e"
            ]
        ]
    },
    {
        "id": "ce2dd4aff1337e2a",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "list tokens",
        "func": "const config = global.get(\"config\");\n\nmsg.url = `${config.url_token}list?user=${config.grafana_user}&pass=${config.grafana_pass}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "6295cfb665a849a5"
            ]
        ]
    },
    {
        "id": "733cf0b48e275753",
        "type": "catch",
        "z": "4f13ca8d684be14d",
        "name": "http error",
        "scope": [
            "6295cfb665a849a5",
            "fa0a88f356023ec6",
            "6f825c20a5f8abf5"
        ],
        "uncaught": false,
        "x": 180,
        "y": 780,
        "wires": [
            [
                "4c97ebb598b2fc3d"
            ]
        ]
    },
    {
        "id": "4c97ebb598b2fc3d",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "full msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 780,
        "wires": []
    },
    {
        "id": "d8c2671168e219f1",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "generate token",
        "func": "const config = global.get(\"config\");\n\nmsg.url = `${config.url_token}generate?user=${config.grafana_user}&pass=${config.grafana_pass}&device=simulador`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "fa0a88f356023ec6"
            ]
        ]
    },
    {
        "id": "d8b9d016e967a93c",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": ".2 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "ce2dd4aff1337e2a"
            ]
        ]
    },
    {
        "id": "9518aa1b3ce9198e",
        "type": "switch",
        "z": "4f13ca8d684be14d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 340,
        "wires": [
            [
                "d8c2671168e219f1"
            ],
            [
                "7e46875a3f07ad94"
            ]
        ]
    },
    {
        "id": "fa0a88f356023ec6",
        "type": "http request",
        "z": "4f13ca8d684be14d",
        "name": "get http ok",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "7e46875a3f07ad94"
            ]
        ]
    },
    {
        "id": "7e46875a3f07ad94",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "save",
        "func": "const token = msg.payload.simulador || msg.payload.token;\n\nif (token.length === 32) {\n    global.set(\"headers\", {\n        Authorization: `Bearer ${token}`\n    });\n}\n\nmsg.payload = global.get(\"headers\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "ec50830d95d7faea"
            ]
        ]
    },
    {
        "id": "ec50830d95d7faea",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "headers",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 340,
        "wires": []
    },
    {
        "id": "fcc2c15bb1b7c795",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "7d86019b8274d46b",
        "type": "mqtt in",
        "z": "4f13ca8d684be14d",
        "name": "",
        "topic": "lora-ccic/",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "82b1f593c0d9937c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 660,
        "y": 580,
        "wires": [
            [
                "25e68572504e173b",
                "b76708477da203e2"
            ]
        ]
    },
    {
        "id": "25e68572504e173b",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "mqtt messages",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 640,
        "wires": []
    },
    {
        "id": "7ada066df377afec",
        "type": "file in",
        "z": "4f13ca8d684be14d",
        "name": "read facilities.json",
        "filename": "Desktop/facilities.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 220,
        "wires": [
            [
                "81b82240936719f2"
            ]
        ]
    },
    {
        "id": "81b82240936719f2",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "save",
        "func": "const facilities = JSON.parse(msg.payload);\nglobal.set(\"facilities\", facilities);\n\nmsg.payload = global.get(\"facilities\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "fcc2c15bb1b7c795"
            ]
        ]
    },
    {
        "id": "b76708477da203e2",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "d": true,
        "name": "facility search",
        "func": "let idFacility = parseInt(msg.payload.substring(\n    msg.payload.indexOf(\"<\") + 1,\n    msg.payload.lastIndexOf(\">\")\n));\n\nidFacility = idFacility < 20000 ? idFacility : idFacility - 10000;\n\nconst facilities = global.get(\"facilities\") || {};\nif (!facilities[idFacility]) {\n    throw new Error(`no existe esta facility: ${idFacility}`);\n}\n\nconst loraPayload = msg.payload.substring(msg.payload.indexOf(\">\") + 1);\nlet loraData = {};\nconst validLoraDataEntries = [\"voltage\", \"temperature\", \"current\", \"raindrops\", \"gas\", \"lat\", \"lng\", \"alt\"];\n// ToDo: añadir mensajes militares\nloraPayload.split(\"&\").forEach(str => {\n    const arr = str.split(\"=\");\n    if (!validLoraDataEntries.includes(arr[0])) {\n        throw new Error(`entry invalido en carga util de LoRa: ${arr[0]}`);\n    }\n    loraData = {\n        ...loraData,\n        [arr[0]]: arr[1]\n    };\n});\n\n\nlet mqttBuffer = global.get(\"mqttBuffer\") || {} ;\nif (!mqttBuffer[idFacility]) {\n    mqttBuffer = {\n        ...mqttBuffer,\n        [idFacility]: {\n            metadata: facilities[idFacility]\n        }\n    };\n}\n\nmqttBuffer[idFacility].loraData = {\n    ...mqttBuffer[idFacility].loraData,\n    ...loraData\n};\n\nglobal.set(\"mqttBuffer\", mqttBuffer);\nmsg.payload = mqttBuffer[idFacility];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 580,
        "wires": [
            [
                "6f082191959bd86b"
            ]
        ]
    },
    {
        "id": "ecee1a956ea6b9d9",
        "type": "mqtt out",
        "z": "4f13ca8d684be14d",
        "name": "",
        "topic": "lora-ccic/",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "82b1f593c0d9937c",
        "x": 520,
        "y": 580,
        "wires": []
    },
    {
        "id": "4eae255b059dd109",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "nodo interior",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nodo interior",
        "payloadType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "611edfbf7959d5a2"
            ]
        ]
    },
    {
        "id": "e975a788cb0bc65a",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "nodo exterior",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nodo exterior",
        "payloadType": "str",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "611edfbf7959d5a2"
            ]
        ]
    },
    {
        "id": "a7113242f1709d9a",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "643160fec696ea2b"
            ]
        ]
    },
    {
        "id": "643160fec696ea2b",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "mqttBuffer",
        "func": "\nglobal.set(\"mqttBuffer\", {});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d567249ea6dd76a2",
        "type": "split",
        "z": "4f13ca8d684be14d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "665beff27c70bc7d"
            ]
        ]
    },
    {
        "id": "665beff27c70bc7d",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "insert",
        "func": "\nconst config = global.get(\"config\");\nconst headers = global.get(\"headers\");\nconst baseUrl = msg.payload.type === \"metrica\" ? config.url_metricas : config.url_eventos;\n\nmsg = {\n    payload: JSON.stringify(msg.payload.body),\n    url: baseUrl + msg.payload.endpoint,\n    headers\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 580,
        "wires": [
            [
                "baf9389b5bf4a787"
            ]
        ]
    },
    {
        "id": "baf9389b5bf4a787",
        "type": "http request",
        "z": "4f13ca8d684be14d",
        "name": "post http ok",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 580,
        "wires": [
            [
                "22164fe6f7d1a4c6"
            ]
        ]
    },
    {
        "id": "22164fe6f7d1a4c6",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 580,
        "wires": []
    },
    {
        "id": "cb8b6a3cb85a66f6",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "requests",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 640,
        "wires": []
    },
    {
        "id": "611edfbf7959d5a2",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "randomize payload",
        "func": "function Utf8ArrayToStr(array) {\n    var out, i, len, c;\n    var char2, char3;\n\n    out = \"\";\n    len = array.length;\n    i = 0;\n    while (i < len) {\n        c = array[i++];\n        switch (c >> 4) {\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n                // 0xxxxxxx\n                out += String.fromCharCode(c);\n                break;\n            case 12: case 13:\n                // 110x xxxx   10xx xxxx\n                char2 = array[i++];\n                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n                break;\n            case 14:\n                // 1110 xxxx  10xx xxxx  10xx xxxx\n                char2 = array[i++];\n                char3 = array[i++];\n                out += String.fromCharCode(((c & 0x0F) << 12) |\n                    ((char2 & 0x3F) << 6) |\n                    ((char3 & 0x3F) << 0));\n                break;\n        }\n    }\n\n    return out;\n}\n\nconst loraId = 10009;\nconst fuelLimit = 150;\n\nconst rng = (min, max) => (Math.random() * (max - min + 1) + min).toFixed(2);\nconst rngB = () => Math.random() > 0.5;\nconst nroMM = () => {\n    const nro = global.get(\"nroMM\") || 1;\n    global.set(\"nroMM\", nro + 1);\n    return nro;\n}\nconst trunc = (str) => parseFloat(parseFloat(str).toFixed(0))\n\nconst generarPayloadInt = () => `<${loraId}>voltage=${rng(210, 230)}&temperature=${rng(5, 30)}`;\nconst generarPayloadExt = () => `<${10000 + loraId}>current=${rng(0.5, 10)}&raindrops=${rngB()}&gas=${rng(0, fuelLimit)}/${fuelLimit}&lat=-34.57475&lng=58.43552&alt=15`;\n\n/* \n    nro_mm: 2,\n    clasificacion: \"reservado\",\n    precedencia: \"rutina\",\n    cifrado: true,\n    destino: \"Puesto Comando\",\n    origen: \"Centro de Mensajes\",\n    evento: \"entregar\",\n*/\nconst generarMM = () => {\n    const clasificacion = trunc(rng(1, 4));             // 1: publico, 2: reservado, 3: confidencial, 4: secreto\n    const numeroMsj = nroMM();                              \n    const precedencia = trunc(rng(1, 4));               // 1: rutina, 2: prioridad, 3: inmediato, 4: flash\n    const cifrado = clasificacion >= 3 ? + rngB() : 0;      \n    const indexOrigen = trunc(rng(1, 5));               // 1: Red Cdo Op, 2: Red Mat Pers, 3: Red Icia, 4: Red Cdo, 5: Red Op\n    const indexDestino = indexOrigen % 5 + 1;               // 1: Red Cdo Op, 2: Red Mat Pers, 3: Red Icia, 4: Red Cdo, 5: Red Op\n    const evento = trunc(rng(1, 4));                    // 1: generado, 2: recibido_estafeta, 3: entregado_estafeta, 4: transmitido \n\n    const nro = numeroMsj % 65536;\n    let dataByte = [];\n    dataByte[0] += (clasificacion - 1) * 2^0;    // bits 0 y 1\n    dataByte[0] += (precedencia - 1) * 2^2;      // bits 2 y 3\n    dataByte[0] += cifrado * 2^4;                // bit 4\n    dataByte[1] += (indexOrigen - 1) * 2^5;      // bits 5, 6 y 7\n    dataByte[1] += (indexDestino - 1) * 2^0;     // bits 0, 1 y 2\n    dataByte[1] += (evento - 1) * 2^3;           // bits 3 y 4\n\n    \n    const arr1 = new Uint8Array(3);\n    arr1[0] = 0;\n    arr1[1] = numeroMsj % 256;\n    arr1[2] = (numeroMsj - numeroMsj % 256) / 256;\n    const arr2 = new Uint8Array(3);\n    arr2[0] = 0;\n    arr2[1] = dataByte[0];\n    arr2[2] = dataByte[1];\n    return `<${loraId}>nro=123&data=456`;\n    //return `<${loraId}>nro=${Utf8ArrayToStr(arr1)}&data=${Utf8ArrayToStr(arr2)}`;\n}\n\nif (msg.payload === \"nodo interior\") {\n    msg.payload = generarPayloadInt();\n} else if (msg.payload === \"nodo exterior\") {\n    msg.payload = generarPayloadExt();\n} else if (msg.payload === \"mensaje militar\") {\n    msg.payload = generarMM();\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 580,
        "wires": [
            [
                "ecee1a956ea6b9d9"
            ]
        ]
    },
    {
        "id": "9daf482aa2597b1e",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "mensaje militar",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mensaje militar",
        "payloadType": "str",
        "x": 140,
        "y": 700,
        "wires": [
            [
                "611edfbf7959d5a2"
            ]
        ]
    },
    {
        "id": "6f082191959bd86b",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "LoRa parser",
        "func": "const requests = [];\n\nconst timestamp = parseInt(new Date().getTime() / 1000);\nconst facilidad = msg.payload.metadata.name;\nconst generador = msg.payload.metadata.generator;\n\nconst nivel = parseFloat(msg.payload.loraData.gas?.split(\"/\")[0]) || 0.0;\nconst capacidad = parseFloat(msg.payload.loraData.gas?.split(\"/\")[1]) || 1.0;\nrequests.push({\n    endpoint: \"nivel-combus\",\n    type: \"metrica\",\n    body: {\n        generador,\n        nivel,\n        capacidad,\n        timestamp\n    }\n});\n\nrequests.push({\n    endpoint: \"alimentacion\",\n    type: \"metrica\",\n    body: {\n        generador,\n        tension: parseFloat(msg.payload.loraData.voltage) || 0.0,\n        corriente: parseFloat(msg.payload.loraData.current) || 1.0,\n        timestamp\n    }\n});\n\n// todo endpoint GPS\n/* requests.push({\n    endpoint: \"geolocalization\",\n    type: \"metrica\",\n    body: {\n        facilidad,\n        latitude: parseFloat(msg.payload.loraData.lat) || 0,\n        longitude: parseFloat(msg.payload.loraData.lng) || 0,\n        altitude: parseFloat(msg.payload.loraData.alt) || 0,\n        timestamp,\n    }\n})*/\n\nrequests.push({\n    endpoint: \"sensor_bool\",\n    type: \"evento\",\n    body: {\n        facilidad,\n        evento: \"rain\",\n        valor: msg.payload.loraData.raindrops === \"1\",\n        timestamp\n    }\n});\n\n\n// deprecated\n/* requests.push({\n    endpoint: \"sensor_bool\",\n    type: \"evento\",\n    body: {\n        facilidad,\n        evento: \"presence\",\n        valor: msg.payload.loraData.presence === \"1\",\n        timestamp\n    }\n}); */ \n\n// ToDo - parsear data de los mensajes militares\n/* requests.push({\n    endpoint: \"mens-mil\",\n    type: \"evento\",\n    body: {\n        nro_mm: 2,\n        clasificacion: \"reservado\",\n        precedencia: \"rutina\",\n        cifrado: true,\n        destino: \"Puesto Comando\",\n        origen: \"Centro de Mensajes\",\n        evento: \"entregar\",\n        timestamp\n    }\n})\n*/\n\n\nmsg.payload = requests;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "d567249ea6dd76a2",
                "cb8b6a3cb85a66f6"
            ]
        ]
    },
    {
        "id": "59e3ce42801f6b8d",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "estado-servicio",
        "payloadType": "str",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "1a14ebb7ae9ed212"
            ]
        ]
    },
    {
        "id": "1a14ebb7ae9ed212",
        "type": "function",
        "z": "3540c13fef4eaf3c",
        "name": "metrics insert",
        "func": "const config = global.get(\"config\");\nconst headers = global.get(\"headers\");\nconst endpoint = msg.payload;\nconst swaggerDataExamples = {\n    \"estado-servicio\": {\n        facilidad: \"ECR Cdo\",\n        estado: \"en servicio\"\n    },\n    \"longitud-cola\": {\n        facilidad: \"ECR Cdo\",\n        long_cola: 5,\n    },\n    \"nivel-combus\": {\n        generador: \"generador 1\",\n        nivel: 5.4,\n        capacidad: 10\n    },\n    \"alimentacion\": {\n        generador: \"generador 1\",\n        tension: 223.6,\n        corriente: 10.0\n    }\n};\n\nmsg.payload = JSON.stringify({\n    ...swaggerDataExamples[msg.payload],\n    timestamp: parseInt(new Date().getTime() / 1000)\n});\nmsg.url = config.url_metricas + endpoint;\n\nmsg.headers = headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "970a76e286d4227c"
            ]
        ]
    },
    {
        "id": "1958109be324e66d",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "longitud-cola",
        "payloadType": "str",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "1a14ebb7ae9ed212"
            ]
        ]
    },
    {
        "id": "561bc044cec631a7",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nivel-combus",
        "payloadType": "str",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "1a14ebb7ae9ed212"
            ]
        ]
    },
    {
        "id": "c9deb913baff3738",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "alimentacion",
        "payloadType": "str",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "1a14ebb7ae9ed212"
            ]
        ]
    },
    {
        "id": "6f825c20a5f8abf5",
        "type": "http request",
        "z": "3540c13fef4eaf3c",
        "name": "post http ok",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "a1daa3ac156f9010"
            ]
        ]
    },
    {
        "id": "a1daa3ac156f9010",
        "type": "debug",
        "z": "3540c13fef4eaf3c",
        "name": "payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "7bba23b06978044a",
        "type": "function",
        "z": "3540c13fef4eaf3c",
        "name": "events insert",
        "func": "const config = global.get(\"config\");\nconst headers = global.get(\"headers\");\nconst endpoint = msg.payload === \"mens-mil\" ? \"mens-mil\" : \"sensor_bool\";\nconst swaggerDataExamples = {\n    \"mens-mil\": {\n        nro_mm: 2,\n        clasificacion: \"reservado\",\n        precedencia: \"rutina\",\n        cifrado: true,\n        destino: \"Puesto Comando\",\n        origen: \"Centro de Mensajes\",\n        evento: \"entregar\",\n    },\n    \"rain-sensor\": {\n        facilidad: \"generador 1\",\n        evento: \"rain\",\n        valor: true\n    },\n    \"presence-sensor\" : {\n        facilidad: \"generador 1\",\n        evento: \"presence\",\n        valor: true\n    }\n};\n\nmsg.payload = JSON.stringify({\n    ...swaggerDataExamples[msg.payload],\n    timestamp: parseInt(new Date().getTime() / 1000)\n});\nmsg.url = config.url_eventos + endpoint;\n\nmsg.headers = headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "970a76e286d4227c"
            ]
        ]
    },
    {
        "id": "ad83ac8858114762",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mens-mil",
        "payloadType": "str",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "7bba23b06978044a"
            ]
        ]
    },
    {
        "id": "4c48b7f4287b12e9",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "rain-sensor",
        "payloadType": "str",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "7bba23b06978044a"
            ]
        ]
    },
    {
        "id": "578b66f2c692bbd3",
        "type": "inject",
        "z": "3540c13fef4eaf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "presence-sensor",
        "payloadType": "str",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "7bba23b06978044a"
            ]
        ]
    },
    {
        "id": "970a76e286d4227c",
        "type": "debug",
        "z": "3540c13fef4eaf3c",
        "name": "payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 300,
        "wires": []
    }
]
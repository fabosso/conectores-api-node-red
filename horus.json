[
    {
        "id": "4f13ca8d684be14d",
        "type": "tab",
        "label": "Conector a API Horus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0dcd6c2e7ff4d7de",
        "type": "tab",
        "label": "Debug",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5842f7d28b260c86",
        "type": "subflow",
        "name": "Initialize",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 140,
                "wires": [
                    {
                        "id": "7ada066df377afec"
                    },
                    {
                        "id": "b090a0b95690d0aa"
                    },
                    {
                        "id": "83dfae9d90513fcc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 140,
                "wires": [
                    {
                        "id": "81b82240936719f2",
                        "port": 0
                    },
                    {
                        "id": "708ca09a7db425b7",
                        "port": 0
                    },
                    {
                        "id": "83dfae9d90513fcc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1e494c71e42901f0",
        "type": "subflow",
        "name": "Token generator",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "ce2dd4aff1337e2a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 160,
                "wires": [
                    {
                        "id": "7e46875a3f07ad94",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "205a3dbe388d752f",
        "type": "subflow",
        "name": "MQTT to HorusAPI connector",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "b76708477da203e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 80,
                "wires": [
                    {
                        "id": "baf9389b5bf4a787",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7c3d3a46f80e9b7d",
        "type": "subflow",
        "name": "Serial to SIGEFA API connector",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "15d67eb839f741f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "c59182bcf9ecdb64",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bda60c0bd3eca39a",
        "type": "subflow",
        "name": "SIGEFA API to Serial connector",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "6fc9e2f7239c078d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 80,
                "wires": [
                    {
                        "id": "2dda3e74810fe7c1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "eaaada171af64f50",
        "type": "subflow",
        "name": "SIGEFA DB to Serial connector",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b8dd5708abf24b77"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 200,
                "wires": [
                    {
                        "id": "9ecb3623226906e6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "82b1f593c0d9937c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2c9e26433f2a92f0",
        "type": "ui_tab",
        "name": "Conector Horus NRUI",
        "icon": "fa-eye",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "56160cc0ad9f5e14",
        "type": "ui_group",
        "name": "Default",
        "tab": "2c9e26433f2a92f0",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "09451daed0e487ca",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#0a8550",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#0a8550",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0a8550",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0fcc7b",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0a8550",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Verdana,Verdana,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e921b04d3fa5c6bc",
        "type": "ui_tab",
        "name": "Debug",
        "icon": "dashboard",
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8c09f9139ae0c63c",
        "type": "ui_group",
        "name": "Combustible",
        "tab": "e921b04d3fa5c6bc",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fe14c99be0cab520",
        "type": "ui_group",
        "name": "GPS",
        "tab": "e921b04d3fa5c6bc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c9ccc3d91124913b",
        "type": "sqlitedb",
        "db": "C:\\Users\\Fran\\OneDrive\\Documentos\\VSCode\\Tesis\\SIGEFA\\db.sqlite3",
        "mode": "RO"
    },
    {
        "id": "708ca09a7db425b7",
        "type": "function",
        "z": "5842f7d28b260c86",
        "name": "save config",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nconst arr = msg.payload.split(\"\\n\").filter((/** @type {string | string[]} */ line) => line.includes(\"=\"));\nlet config = {};\narr.forEach((/** @type {string} */ item) => {\n    const lineArr = item.split(\"=\");\n    const key = lineArr[0].trim();\n    const value = lineArr[1].trim();\n    config = {\n        ...config,\n        [key]: value\n    }\n});\n\nhorusAPI = {\n    ...horusAPI,\n    config\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nmsg.payload = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b090a0b95690d0aa",
        "type": "file in",
        "z": "5842f7d28b260c86",
        "name": "read config.ini",
        "filename": ".node-red\\config.ini",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 140,
        "wires": [
            [
                "708ca09a7db425b7"
            ]
        ]
    },
    {
        "id": "7ada066df377afec",
        "type": "file in",
        "z": "5842f7d28b260c86",
        "name": "read facilities.json",
        "filename": ".node-red\\facilities.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "81b82240936719f2"
            ]
        ]
    },
    {
        "id": "81b82240936719f2",
        "type": "function",
        "z": "5842f7d28b260c86",
        "name": "save facilities",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nconst facilities = JSON.parse(msg.payload);\nhorusAPI = {\n    ...horusAPI,\n    facilities\n};\nglobal.set(\"horusAPI\", horusAPI);\n\nmsg.payload = facilities;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "83dfae9d90513fcc",
        "type": "function",
        "z": "5842f7d28b260c86",
        "name": "save other constants",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nconst validLoraKeys = [\"voltage\", \"temperature\", \"current\", \"raindrops\", \"gas\", \"lat\", \"lng\", \"alt\", \"status\"];\nconst validMMKeys = [\"nro\", \"o\", \"d\", \"cl\", \"p\", \"ci\", \"e\", \"m\"];\nconst diccionario = {\n    clasificaciones: {\n        1: \"publico\",\n        2: \"reservado\",\n        3: \"confidencial\",\n        4: \"secreto\"\n    },\n    precedencias: {\n        1: \"rutina\",\n        2: \"prioridad\",\n        3: \"inmediato\",\n        4: \"flash\"\n    },\n    redes: {\n        1: \"Red Cdo Op\",\n        2: \"Red Mat Pers\",\n        3: \"Red Icia\",\n        4: \"Red Cdo\",\n        5: \"Red Op\"\n    },\n    eventos: {\n        1: \"generado\",\n        2: \"recibido_estafeta\",\n        3: \"entregado_estafeta\",\n        4: \"transmitido\"\n    }\n}\n\nhorusAPI = {\n    ...horusAPI,\n    validLoraKeys,\n    validMMKeys,\n    diccionario\n}\n\nglobal.set(\"horusAPI\", horusAPI);\n\nmsg.payload = {\n    validLoraKeys,\n    validMMKeys,\n    diccionario\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "6295cfb665a849a5",
        "type": "http request",
        "z": "1e494c71e42901f0",
        "name": "get http ok",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "9518aa1b3ce9198e"
            ]
        ]
    },
    {
        "id": "ce2dd4aff1337e2a",
        "type": "function",
        "z": "1e494c71e42901f0",
        "name": "list tokens",
        "func": "\nconst { config } = global.get(\"horusAPI\");\n\nmsg.url = `${config.url_token}list?user=${config.grafana_user}&pass=${config.grafana_pass}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "6295cfb665a849a5"
            ]
        ]
    },
    {
        "id": "d8c2671168e219f1",
        "type": "function",
        "z": "1e494c71e42901f0",
        "name": "generate token",
        "func": "const { config } = global.get(\"horusAPI\");\n\nmsg.url = `${config.url_token}generate?user=${config.grafana_user}&pass=${config.grafana_pass}&device=simulador`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "fa0a88f356023ec6"
            ]
        ]
    },
    {
        "id": "9518aa1b3ce9198e",
        "type": "switch",
        "z": "1e494c71e42901f0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "d8c2671168e219f1"
            ],
            [
                "7e46875a3f07ad94"
            ]
        ]
    },
    {
        "id": "fa0a88f356023ec6",
        "type": "http request",
        "z": "1e494c71e42901f0",
        "name": "get http ok",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 80,
        "wires": [
            [
                "7e46875a3f07ad94"
            ]
        ]
    },
    {
        "id": "7e46875a3f07ad94",
        "type": "function",
        "z": "1e494c71e42901f0",
        "name": "save",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nconst token = msg.payload.simulador || msg.payload.token;\n\nif (token.length !== 32) {\n    throw new Error (\"token invalido Horus API\");\n}\n\nconst headers = {\n    Authorization: `Bearer ${token}`\n}\n\nhorusAPI = {\n    ...horusAPI,\n    headers\n};\nglobal.set(\"horusAPI\", horusAPI);\n\nmsg.payload = headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b76708477da203e2",
        "type": "function",
        "z": "205a3dbe388d752f",
        "name": "facility search",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nlet idFacility;\nlet mqttBuffer = {};\nlet header = msg.payload.substring(0, msg.payload.indexOf(\">\"));\n// p. ej.: header = \"<10009>\"\n\n// chequeo primer caracter\nif (header.charAt(0) !== \"<\") {\n    throw new Error(`mensaje malformado: se esperaba un \"<\", se obtuvo un: \"${header.charAt(0)}\"`);\n}\n\n// chequeo que la facility exista\nidFacility = parseInt(header.substring(1));\nidFacility = idFacility < 20000 ? idFacility : idFacility - 10000;\nconst facilities = horusAPI.facilities || {};\nif (!facilities[idFacility]) {\n    throw new Error(`no existe esta facility: ${idFacility}, ${header}`);\n}\n\n// chequeo que sea mensaje militar\nconst checkForMM = (message) => {\n    const loraPayload = message.substring(message.indexOf(\">\") + 1);\n    const validMMKeys = horusAPI.validMMKeys;\n    let returnable = true;\n    loraPayload.split(\"&\").forEach(str => {\n        const arr = str.split(\"=\");\n        if (!validMMKeys.includes(arr[0])) {\n            returnable = false;\n        }\n    });\n    return returnable;\n}\nconst isMM = checkForMM(msg.payload);\n\n// metadata\nmqttBuffer = horusAPI.mqttBuffer || {};\nif (!mqttBuffer[idFacility]) {\n    mqttBuffer = {\n        ...mqttBuffer,\n        [idFacility]: {\n            metadata: facilities[idFacility]\n        }\n    };\n}\nconst metadata = mqttBuffer[idFacility].metadata;\n\n// loradata\nconst loraPayload = msg.payload.substring(msg.payload.indexOf(\">\") + 1);\nlet loraData = {};\nconst validKeys = isMM ? horusAPI.validMMKeys : horusAPI.validLoraKeys;\nloraPayload.split(\"&\").forEach(str => {\n    const arr = str.split(\"=\");\n    if (!validKeys.includes(arr[0])) {\n        throw new Error(`entry invalido en carga util de LoRa: ${arr[0]}, isMM: ${isMM}`);\n    }\n    loraData = {\n        ...loraData,\n        [arr[0]]: arr[1]\n    };\n});\n\n// update mqtt buffer\nif (!isMM) {\n    mqttBuffer[idFacility].loraData = {\n        ...mqttBuffer[idFacility].loraData,\n        ...loraData\n    };\n}\n\n// payload message\nmsg.payload = {\n    metadata,\n    loraData\n}\n\nhorusAPI = {\n    ...horusAPI,\n    mqttBuffer\n};\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "6f082191959bd86b",
                "a3411b74910fc7e5"
            ]
        ]
    },
    {
        "id": "d567249ea6dd76a2",
        "type": "split",
        "z": "205a3dbe388d752f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 80,
        "wires": [
            [
                "665beff27c70bc7d"
            ]
        ]
    },
    {
        "id": "665beff27c70bc7d",
        "type": "function",
        "z": "205a3dbe388d752f",
        "name": "insert",
        "func": "\nconst config = global.get(\"horusAPI\").config;\nconst headers = global.get(\"horusAPI\").headers;\nconst baseUrl = msg.payload.type === \"metrica\" ? config.url_metricas : config.url_eventos;\n\nmsg = {\n    payload: JSON.stringify(msg.payload.body),\n    url: baseUrl + msg.payload.endpoint,\n    headers\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            [
                "baf9389b5bf4a787"
            ]
        ]
    },
    {
        "id": "baf9389b5bf4a787",
        "type": "http request",
        "z": "205a3dbe388d752f",
        "name": "post http ok",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cb8b6a3cb85a66f6",
        "type": "debug",
        "z": "205a3dbe388d752f",
        "d": true,
        "name": "requests",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "6f082191959bd86b",
        "type": "function",
        "z": "205a3dbe388d752f",
        "name": "LoRa parser",
        "func": "const horusAPI = global.get(\"horusAPI\")\nconst diccionario = horusAPI.diccionario;\nconst traduccionEstados = {\n    S: \"en servicio\",\n    L: \"servicio limitado\",\n    F: \"fuera de servicio\"\n}\n\nconst requests = [];\n\nconst naftaDebug = horusAPI.uiNaftaDebugMode;\nconst naftaPercentageDebug = horusAPI.uiNaftaDebugPercentage;\nconst gpsDebug = horusAPI.uiGPSDebugMode;\nconst latDebug = horusAPI.uiGPSDebugLat;\nconst longDebug = horusAPI.uiGPSDebugLong;\nconst altDebug = horusAPI.uiGPSDebugAlt;\nconst timestamp = parseInt(new Date().getTime() / 1000);\nconst facilidad = msg.payload.metadata.name;\nconst generador = msg.payload.metadata.generator;\nconst estado = traduccionEstados[msg.payload.loraData.status] || \"fuera de servicio\"\n\nif (!msg.payload.loraData.nro) {\n    requests.push({\n        endpoint: \"estado-servicio\",\n        type: \"metrica\",\n        body: {\n            facilidad,\n            estado,\n            timestamp\n        }\n    });\n\n    if (msg.payload.loraData.voltage || msg.payload.loraData.current) {\n        requests.push({\n            endpoint: \"alimentacion\",\n            type: \"metrica\",\n            body: {\n                generador,\n                tension: parseFloat(msg.payload.loraData.voltage) || 0.0,\n                corriente: parseFloat(msg.payload.loraData.current) || 0.0,\n                timestamp\n            }\n        });\n    }\n\n    if (msg.payload.loraData.temperature) {\n        requests.push({\n            endpoint: \"temperatura\",\n            type: \"evento\",\n            body: {\n                facilidad,\n                temperature: parseFloat(msg.payload.loraData.temperature) || 0.0,\n                timestamp\n            }\n        });\n    }\n\n    if (msg.payload.loraData.gas) {\n        let nivel = parseFloat(msg.payload.loraData.gas?.split(\"/\")[0]) || 0.0;\n        const capacidad = parseFloat(msg.payload.loraData.gas?.split(\"/\")[1]) || 1.0;\n        if (naftaDebug) {\n            nivel = capacidad * naftaPercentageDebug / 100.0; \n        }\n        requests.push({\n            endpoint: \"nivel-combus\",\n            type: \"metrica\",\n            body: {\n                generador,\n                nivel,\n                capacidad,\n                timestamp\n            }\n        });\n    }\n\n    if (msg.payload.loraData.lat) {\n        if (gpsDebug) {\n            requests.push({\n                endpoint: \"geolocalizacion\",\n                type: \"evento\",\n                body: {\n                    facilidad,\n                    latitude: latDebug,\n                    longitude: longDebug,\n                    altitude: altDebug,\n                    timestamp,\n                }\n            });\n        } else {\n            if (msg.payload.loraData.lat !== \"***\") {\n                requests.push({\n                    endpoint: \"geolocalizacion\",\n                    type: \"evento\",\n                    body: {\n                        facilidad,\n                        latitude: parseFloat(msg.payload.loraData.lat) || 0.0,\n                        longitude: parseFloat(msg.payload.loraData.lng) || 0.0,\n                        altitude: parseFloat(msg.payload.loraData.alt) || 0.0,\n                        timestamp,\n                    }\n                });\n            }\n        }       \n    }\n\n    requests.push({\n        endpoint: \"sensor_bool\",\n        type: \"evento\",\n        body: {\n            facilidad,\n            evento: \"rain\",\n            valor: msg.payload.loraData.raindrops === \"1\",\n            timestamp\n        }\n    });\n} else {\n\n    const nro_mm = parseInt(msg.payload.loraData.nro);\n    const clasificacion = diccionario.clasificaciones[msg.payload.loraData.cl];\n    const precedencia = diccionario.precedencias[msg.payload.loraData.p];\n    const cifrado = msg.payload.loraData.ci === \"1\";\n    const destino = diccionario.redes[msg.payload.loraData.d];\n    const origen = diccionario.redes[msg.payload.loraData.o];\n    const evento = diccionario.eventos[msg.payload.loraData.e];\n    const mensaje = msg.payload.loraData.m;\n\n    requests.push({\n        endpoint: \"mens-mil\",\n        type: \"evento\",\n        body: {\n            nro_mm,\n            clasificacion,\n            precedencia,\n            cifrado,\n            destino,\n            origen,\n            evento,\n            mensaje,\n            timestamp\n        }\n    })\n}\n\nmsg.payload = requests;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "d567249ea6dd76a2",
                "cb8b6a3cb85a66f6"
            ]
        ]
    },
    {
        "id": "a3411b74910fc7e5",
        "type": "debug",
        "z": "205a3dbe388d752f",
        "d": true,
        "name": "facility output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "15d67eb839f741f8",
        "type": "function",
        "z": "7c3d3a46f80e9b7d",
        "name": "LoRa parser",
        "func": "const { validLoraKeys, sensorica } = global.get(\"sigefaAPI\");\n\nconst loraPayload = msg.payload.substring(msg.payload.indexOf(\":\") + 1);\nlet loraData = {};\n\nloraPayload.replace(/(\\r\\n|\\n|\\r)/gm, \"\").split(\" \").forEach(str => {\n    if (str.length > 0) {\n        const arr = str.replace(\",\", \"\").split(\"=\");\n        if (!validLoraKeys.includes(arr[0])) {\n            throw new Error(`entry invalido en carga util de LoRa: ${arr[0]}`);\n        }\n        if (arr[0] in sensorica) {\n            loraData = {\n                ...loraData,\n                [arr[0]]: arr[1]\n            };\n        }\n        if (arr[0] === \"emergency\") {\n            loraData = {\n                ...loraData,\n                emergency: arr[1]\n            }\n        } \n    }\n\n});\n\n\nmsg.payload = loraData;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "cc3177255813ca6f"
            ]
        ]
    },
    {
        "id": "cc3177255813ca6f",
        "type": "split",
        "z": "7c3d3a46f80e9b7d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "key",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "a07ff4ca344e29e9"
            ]
        ]
    },
    {
        "id": "a07ff4ca344e29e9",
        "type": "function",
        "z": "7c3d3a46f80e9b7d",
        "name": "request",
        "func": "const { sensorica, baseUrl, facilidadId, traduccion } = global.get(\"sigefaAPI\");\nconst previousStatus = global.get(\"sigefaAPI\").status;\nlet body = {};\nlet url = \"\";\n\nconst isSensor = msg.key in sensorica;\n\nif (isSensor) {\n    const id = parseInt(sensorica[msg.key]);\n    url = `${baseUrl}/api/facilidad/${facilidadId}/sensor/${id}/edit/`;\n    const nombre = traduccion[msg.key];\n    const indicador = msg.key === \"gas\" ? parseFloat(msg.payload.split(\"/\")[0]) : parseFloat(msg.payload);\n    body = {\n        id,\n        nombre,\n        indicador\n    };\n} else { // it should be an emergency!\n    if (msg.key !== \"emergency\") {\n        throw new Error(`error procesando esto: ${msg.key}`)\n    }\n    url = `${baseUrl}/api/facilidad/${facilidadId}/status`;\n    const status = msg.payload === \"1\" ? \"F\" : previousStatus;\n    body = {\n        nombre: \"Red Cdo\",\n        status\n    }\n}\n\nmsg = {\n    payload: body,\n    url\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "c59182bcf9ecdb64"
            ]
        ]
    },
    {
        "id": "c59182bcf9ecdb64",
        "type": "http request",
        "z": "7c3d3a46f80e9b7d",
        "name": "post http ok",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6fc9e2f7239c078d",
        "type": "function",
        "z": "bda60c0bd3eca39a",
        "name": "request",
        "func": "const { baseUrl, facilidadId } = global.get(\"sigefaAPI\");\nconst url = `${baseUrl}/api/facilidad/${facilidadId}/status`;\n\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9b4e9dc7ee88d343"
            ]
        ]
    },
    {
        "id": "9b4e9dc7ee88d343",
        "type": "http request",
        "z": "bda60c0bd3eca39a",
        "name": "get http ok",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "2dda3e74810fe7c1"
            ]
        ]
    },
    {
        "id": "2dda3e74810fe7c1",
        "type": "function",
        "z": "bda60c0bd3eca39a",
        "name": "watcher",
        "func": "let sigefaAPI = global.get(\"sigefaAPI\");\n\nconst status = msg.payload.status;\nif (![\"F\", \"S\", \"L\"].includes(status)) {\n    throw new Error (\"status desconocido: \" + status);\n}\n\nif (sigefaAPI.firstRun || !sigefaAPI.status || status !== sigefaAPI.status) {\n    msg.payload = `USB: status=${status}\\n`;\n    sigefaAPI = {\n        ...sigefaAPI,\n        firstRun: false,\n        status\n    }\n    global.set(\"sigefaAPI\", sigefaAPI);\n    return msg;\n}\n\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ad4031e5e5ef311f",
        "type": "sqlite",
        "z": "eaaada171af64f50",
        "mydb": "c9ccc3d91124913b",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SIGEFA DB",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "c777938be3a7d992",
                "57ac04f2f554ac5b"
            ]
        ]
    },
    {
        "id": "b8dd5708abf24b77",
        "type": "function",
        "z": "eaaada171af64f50",
        "name": "query",
        "func": "const { facilidadId } = global.get(\"sigefaAPI\");\n\nmsg.topic = \"SELECT * \\\n             FROM ecr_evento \\\n             WHERE facilidad_id = $facilidad_id \\\n             AND tipo_id = 1 \\\n             ORDER BY timestamp \\\n             DESC LIMIT 1\";\nmsg.payload = [facilidadId];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "ad4031e5e5ef311f"
            ]
        ]
    },
    {
        "id": "c777938be3a7d992",
        "type": "debug",
        "z": "eaaada171af64f50",
        "name": "db response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "57ac04f2f554ac5b",
        "type": "function",
        "z": "eaaada171af64f50",
        "name": "objectify",
        "func": "const length = msg.payload.length;\nconst lastObject = msg.payload[length-1];\nconst { facilidadId } = global.get(\"sigefaAPI\");\n\nconst diccionario = {\n    clasificaciones: {\n        \"publico\": 1,\n        \"reservado\": 2,\n        \"confidencial\": 3,\n        \"secreto\": 4,\n    },\n    precedencias: {\n        \"rutina\": 1,\n        \"prioridad\": 2,\n        \"inmediato\": 3,\n        \"flash\": 4\n    },\n    redes: {\n        \"Red Cdo Op\": 1,\n        \"Red Mat Pers\": 2,\n        \"Red Icia\": 3,\n        \"Red Cdo\": 4,\n        \"Red Op\": 5\n    },\n    eventos: {\n        \"generado\": 1,\n        \"recibido_estafeta\": 2,\n        \"entregado_estafeta\": 3,\n        \"transmitido\": 4\n    }\n}\n\n/* \n    mensaje de ejemplo\n    ORIGEN: Red Mat Pers\n    CLASIFICACION: publico\n    PRECEDENCIA: rutina\n    EVENTO: generado\n    MENSAJE: xxx\n*/\n\nconst searchInDescription = (key, arr) => {\n    const found = arr.find(element => element.includes(key.toUpperCase()));\n    if (!found) {\n        if (key === \"Cifrado\") {\n            return 0;\n        }\n        throw new Error(`no se pudo obtener el ${key} del mensaje`);\n    }\n    if (key === \"Cifrado\") {\n        return 1;\n    }\n\n    const payload = found.split(\":\")[1].trim();\n    if (key === \"Origen\" || key === \"Destino\") {\n        const traducido = diccionario.redes[payload];\n        if (!traducido) {\n            throw new Error(`no se encontro ${payload} en el diccionario`);\n        }\n        return traducido;\n    } else if (key === \"Clasificacion\") {\n        const traducido = diccionario.clasificaciones[payload];\n        if (!traducido) {\n            throw new Error(`no se encontro ${payload} en el diccionario`);\n        }\n        return traducido;\n    } else if (key === \"Precedencia\") {\n        const traducido = diccionario.precedencias[payload];\n        if (!traducido) {\n            throw new Error(`no se encontro ${payload} en el diccionario`);\n        }\n        return traducido;\n    } else if (key === \"Evento\") {\n        const traducido = diccionario.eventos[payload];\n        if (!traducido) {\n            throw new Error(`no se encontro ${payload} en el diccionario`);\n        }\n        return traducido;\n    } else if (key === \"Mensaje\") {\n        return payload;\n    }\n}\n\nconst traductorSIGEFAHorus = (sigefaObj) => {\n    const { id, subtipo_id, description } = sigefaObj;\n    const descriptionArrayByLines = description.split(\"\\n\");\n    let destino, origen;\n    if (subtipo_id === 1) {\n        // mensaje entrante\n        destino = facilidadId;\n        origen = searchInDescription(\"Origen\", descriptionArrayByLines);\n    } else if (subtipo_id === 2) {\n        // mensaje saliente\n        origen = facilidadId;\n        destino = searchInDescription(\"Destino\", descriptionArrayByLines);\n    } else {\n        throw new Error(\"subtipo de mensaje SIGEFA desconocido\");\n    }\n    const clasificacion = searchInDescription(\"Clasificacion\", descriptionArrayByLines);\n    const precedencia = searchInDescription(\"Precedencia\", descriptionArrayByLines);\n    const cifrado = searchInDescription(\"Cifrado\", descriptionArrayByLines);\n    const evento = searchInDescription(\"Evento\", descriptionArrayByLines);\n    const mensaje = searchInDescription(\"Mensaje\", descriptionArrayByLines);\n    return {\n        nro_mm: id,\n        origen, \n        destino,\n        clasificacion,\n        precedencia,\n        cifrado,\n        evento,\n        mensaje\n    }\n};\n\nmsg.payload = traductorSIGEFAHorus(lastObject);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "5f0725129897e69c",
                "9ecb3623226906e6"
            ]
        ]
    },
    {
        "id": "5f0725129897e69c",
        "type": "debug",
        "z": "eaaada171af64f50",
        "name": "last db response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 120,
        "wires": []
    },
    {
        "id": "9ecb3623226906e6",
        "type": "function",
        "z": "eaaada171af64f50",
        "name": "watcher",
        "func": "let sigefaAPI = global.get(\"sigefaAPI\");\nconst { nro_mm } = msg.payload;\n\nconst reducer = {\n    \"nro_mm\": \"nro\",\n    \"origen\": \"o\",\n    \"destino\": \"d\",\n    \"clasificacion\": \"cl\",\n    \"precedencia\": \"p\",\n    \"cifrado\": \"ci\",\n    \"evento\": \"e\",\n    \"mensaje\": \"m\",\n}\n\nconst stringify = (obj) => {\n    const keys = Object.keys(obj);\n    let str = \"USB: \";\n    keys.forEach((key, index) => {\n        const isLast = keys.length === index + 1;\n        str += reducer[key];\n        str += \"=\"\n        str += obj[key];\n        if (!isLast) {\n            str += \"&\";\n        }\n    });\n    return str;\n}\n\nif (!sigefaAPI.nro_mm || sigefaAPI.nro_mm < nro_mm) {\n    sigefaAPI = {\n        ...sigefaAPI,\n        nro_mm\n    }\n    global.set(\"sigefaAPI\", sigefaAPI);\n    msg.payload = stringify(msg.payload);\n    return msg;\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "09a8a957ae81c571"
            ]
        ]
    },
    {
        "id": "09a8a957ae81c571",
        "type": "debug",
        "z": "eaaada171af64f50",
        "name": "db stringified",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "733cf0b48e275753",
        "type": "catch",
        "z": "4f13ca8d684be14d",
        "name": "http error",
        "scope": [
            "a141e0b894432d41",
            "a3fe606a94c5478c",
            "8fe334ecd6a161e8"
        ],
        "uncaught": false,
        "x": 920,
        "y": 380,
        "wires": [
            [
                "4c97ebb598b2fc3d"
            ]
        ]
    },
    {
        "id": "4c97ebb598b2fc3d",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "full msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "d8b9d016e967a93c",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": ".2 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "a3fe606a94c5478c"
            ]
        ]
    },
    {
        "id": "ec50830d95d7faea",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "headers debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "7d86019b8274d46b",
        "type": "mqtt in",
        "z": "4f13ca8d684be14d",
        "name": "",
        "topic": "lora-ccic/downlink/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "82b1f593c0d9937c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 400,
        "wires": [
            [
                "8fe334ecd6a161e8",
                "25e68572504e173b"
            ]
        ]
    },
    {
        "id": "25e68572504e173b",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "mqtt input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 340,
        "wires": []
    },
    {
        "id": "4eae255b059dd109",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "nodo interior",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nodo interior",
        "payloadType": "str",
        "x": 810,
        "y": 80,
        "wires": [
            [
                "611edfbf7959d5a2"
            ]
        ]
    },
    {
        "id": "e975a788cb0bc65a",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "nodo exterior",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "nodo exterior",
        "payloadType": "str",
        "x": 810,
        "y": 140,
        "wires": [
            [
                "611edfbf7959d5a2"
            ]
        ]
    },
    {
        "id": "a7113242f1709d9a",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "643160fec696ea2b"
            ]
        ]
    },
    {
        "id": "643160fec696ea2b",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "mqttBuffer",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nconst mqttBuffer = {};\nconst nroMM = 0;\n\nhorusAPI = {\n    ...horusAPI,\n    mqttBuffer,\n    nroMM\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": []
    },
    {
        "id": "22164fe6f7d1a4c6",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "http response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 460,
        "wires": []
    },
    {
        "id": "9daf482aa2597b1e",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "mensaje militar",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mensaje militar",
        "payloadType": "str",
        "x": 820,
        "y": 200,
        "wires": [
            [
                "611edfbf7959d5a2"
            ]
        ]
    },
    {
        "id": "e77896d56312d3b2",
        "type": "subflow:5842f7d28b260c86",
        "z": "4f13ca8d684be14d",
        "name": "",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "a141e0b894432d41"
            ]
        ]
    },
    {
        "id": "6628d660cf7f8f4d",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": ".1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "e77896d56312d3b2"
            ]
        ]
    },
    {
        "id": "a141e0b894432d41",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "init debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "a3fe606a94c5478c",
        "type": "subflow:1e494c71e42901f0",
        "z": "4f13ca8d684be14d",
        "name": "",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "ec50830d95d7faea"
            ]
        ]
    },
    {
        "id": "8fe334ecd6a161e8",
        "type": "subflow:205a3dbe388d752f",
        "z": "4f13ca8d684be14d",
        "name": "",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "22164fe6f7d1a4c6"
            ]
        ]
    },
    {
        "id": "ecee1a956ea6b9d9",
        "type": "mqtt out",
        "z": "4f13ca8d684be14d",
        "name": "",
        "topic": "lora-ccic/downlink",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "82b1f593c0d9937c",
        "x": 1350,
        "y": 80,
        "wires": []
    },
    {
        "id": "611edfbf7959d5a2",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "randomize MQTT payload",
        "func": "let horusAPI = global.get(\"horusAPI\");\nconst loraId = 10009;\nconst fuelLimit = 12;\n\nconst rng = (min, max) => (Math.random() * (max - min + 1) + min).toFixed(2);\nconst rngB = () => Math.random() > 0.5 ? 1 : 0;\nconst nroMM = () => {\n    const nro = horusAPI.nroMM || 1 % 65536;\n    horusAPI = {\n        ...horusAPI,\n        nroMM: nro + 1\n    }\n    global.set(\"horusAPI\", horusAPI);\n    return nro;\n}\nconst trunc = (str) => parseFloat(str.charAt(0))\nconst possibleStatus = ['S', 'L', 'F']\n\nconst generarPayloadInt = () => `<${loraId}>voltage=${rng(210, 230)}&temperature=${rng(5, 30)}&status=${possibleStatus[trunc(rng(0, 2))]}`;\nconst generarPayloadExt = () => `<${10000 + loraId}>current=${rng(0.5, 10)}&raindrops=${rngB()}&gas=${rng(0, fuelLimit)}/${fuelLimit}&lat=${-34.57475 + parseFloat(rng(-0.3, 0.3))}&lng=${-58.43552 + parseFloat(rng(-4.0, 0.0))}&alt=15`;\n\nconst reducer = {\n    \"nro_mm\": \"nro\",\n    \"origen\": \"o\",\n    \"destino\": \"d\",\n    \"clasificacion\": \"cl\",\n    \"precedencia\": \"p\",\n    \"cifrado\": \"ci\",\n    \"evento\": \"e\",\n    \"mensaje\": \"m\",\n}\n\nconst stringify = (obj) => {\n    const keys = Object.keys(obj);\n    let str = `<${loraId}>`;\n    keys.forEach((key, index) => {\n        const isLast = keys.length === index + 1;\n        str += reducer[key];\n        str += \"=\"\n        str += obj[key];\n        if (!isLast) {\n            str += \"&\";\n        }\n    });\n    return str;\n}\n\n/* \n    nro_mm: 2,\n    clasificacion: \"reservado\",\n    precedencia: \"rutina\",\n    cifrado: true,\n    destino: \"Puesto Comando\",\n    origen: \"Centro de Mensajes\",\n    evento: \"entregar\",\n*/\nconst generarMM = () => {\n    const clasificacion = trunc(rng(1, 4));             // 1: publico, 2: reservado, 3: confidencial, 4: secreto\n    const nro_mm = nroMM();                              \n    const precedencia = trunc(rng(1, 4));               // 1: rutina, 2: prioridad, 3: inmediato, 4: flash\n    const cifrado = clasificacion >= 3 ? String(rngB()) : \"0\";      \n    const origen = trunc(rng(1, 5));               // 1: Red Cdo Op, 2: Red Mat Pers, 3: Red Icia, 4: Red Cdo, 5: Red Op\n    const destino = origen % 5 + 1;           // 1: Red Cdo Op, 2: Red Mat Pers, 3: Red Icia, 4: Red Cdo, 5: Red Op\n    const evento = trunc(rng(1, 4));                    // 1: generado, 2: recibido_estafeta, 3: entregado_estafeta, 4: transmitido \n    const mensaje = \"test\";\n\n    \n    // debug (no es outputteable a mqtt)\n    msg.metadata = {\n        nro_mm,\n        origen,\n        destino,\n        clasificacion,\n        precedencia,\n        cifrado,\n        evento,\n        mensaje\n    };\n\n    return stringify(msg.metadata);\n}\n\nif (msg.payload === \"nodo interior\") {\n    msg.payload = generarPayloadInt();\n} else if (msg.payload === \"nodo exterior\") {\n    msg.payload = generarPayloadExt();\n} else if (msg.payload === \"mensaje militar\") {\n    msg.payload = generarMM();\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 80,
        "wires": [
            [
                "ecee1a956ea6b9d9"
            ]
        ]
    },
    {
        "id": "96d3f472694c4a0b",
        "type": "comment",
        "z": "4f13ca8d684be14d",
        "name": "Configuración inicial",
        "info": "",
        "x": 390,
        "y": 20,
        "wires": []
    },
    {
        "id": "ef51bfd07a3d1a33",
        "type": "comment",
        "z": "4f13ca8d684be14d",
        "name": "Simulador payload entrante",
        "info": "",
        "x": 1080,
        "y": 20,
        "wires": []
    },
    {
        "id": "4a52bdcb9640b138",
        "type": "comment",
        "z": "4f13ca8d684be14d",
        "name": "Conector API",
        "info": "",
        "x": 390,
        "y": 280,
        "wires": []
    },
    {
        "id": "602af5277e0846ad",
        "type": "comment",
        "z": "4f13ca8d684be14d",
        "name": "Debug",
        "info": "",
        "x": 1010,
        "y": 280,
        "wires": []
    },
    {
        "id": "9c58eaa9606a813a",
        "type": "mqtt out",
        "z": "4f13ca8d684be14d",
        "name": "",
        "topic": "lora-ccic/uplink",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "82b1f593c0d9937c",
        "x": 600,
        "y": 760,
        "wires": []
    },
    {
        "id": "bfe5605cf3661275",
        "type": "comment",
        "z": "4f13ca8d684be14d",
        "name": "Uplink LoRa",
        "info": "",
        "x": 370,
        "y": 560,
        "wires": []
    },
    {
        "id": "4138f62c81ccba5c",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "uplinkify",
        "func": "const loRaId = global.get(\"horusAPI\").uiLoRaId;\nconst automaticMode = global.get(\"horusAPI\").uiAutomaticMode;\nlet loRaCmd = \"\";\n\nconst checkDayTime = () => {\n    const horaDiurna = 7;\n    const horaNocturna = 19;\n    const horaActual = new Date().getHours();\n    return horaActual >= horaDiurna && horaActual < horaNocturna;\n}\n\nif (msg.payload == \"start alert\") {\n    loRaCmd = \"startAlert\";\n} else {\n    if (automaticMode) {\n        if (msg.payload == \"auto loop\") {\n            if (checkDayTime()) {\n                loRaCmd = \"daytime\";\n            } else {\n                loRaCmd = \"nighttime\";\n            }\n        }\n    } else {\n        if (msg.payload == \"manual day time\") {\n            loRaCmd = \"daytime\";\n        } else if (msg.payload == \"manual night time\") {\n            loRaCmd = \"nighttime\";\n        } \n    }\n}\n\nif (loRaCmd) {\n    msg.payload = `<${loRaId}>${loRaCmd}`;\n    return msg;\n} \n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 760,
        "wires": [
            [
                "9c58eaa9606a813a",
                "8487bcedf1ca350b"
            ]
        ]
    },
    {
        "id": "8487bcedf1ca350b",
        "type": "debug",
        "z": "4f13ca8d684be14d",
        "name": "uplink LoRa",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 840,
        "wires": []
    },
    {
        "id": "a626cdbb7f2557bb",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "save uiLoRaId",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiLoRaId: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 640,
        "wires": []
    },
    {
        "id": "2884fd854ddf3110",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "10009",
        "payloadType": "num",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "d6225589252ca6dd"
            ]
        ]
    },
    {
        "id": "d9134c42a08adf7a",
        "type": "ui_button",
        "z": "4f13ca8d684be14d",
        "name": "",
        "group": "56160cc0ad9f5e14",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Iniciar alerta",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "notifications_none",
        "payload": "start alert",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 760,
        "wires": [
            [
                "4138f62c81ccba5c"
            ]
        ]
    },
    {
        "id": "233f65a95714c60c",
        "type": "ui_switch",
        "z": "4f13ca8d684be14d",
        "name": "",
        "label": "Modo automático",
        "tooltip": "Si está activado, pone al nodo en modo día o noche basado en la hora actual del equipo.",
        "group": "56160cc0ad9f5e14",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 210,
        "y": 700,
        "wires": [
            [
                "b9f2f313fb2647bb"
            ]
        ]
    },
    {
        "id": "b9f2f313fb2647bb",
        "type": "function",
        "z": "4f13ca8d684be14d",
        "name": "save uiAutomaticMode",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiAutomaticMode: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": []
    },
    {
        "id": "587c6f073c08342f",
        "type": "inject",
        "z": "4f13ca8d684be14d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "auto loop",
        "payloadType": "str",
        "x": 190,
        "y": 820,
        "wires": [
            [
                "4138f62c81ccba5c"
            ]
        ]
    },
    {
        "id": "422bb83d8eed12c6",
        "type": "ui_button",
        "z": "4f13ca8d684be14d",
        "name": "",
        "group": "56160cc0ad9f5e14",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Forzar día",
        "tooltip": "Si no está en modo automático, pone al nodo en modo día.",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "brightness_7",
        "payload": "manual day time",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 880,
        "wires": [
            [
                "4138f62c81ccba5c"
            ]
        ]
    },
    {
        "id": "8a1ca87542f99fa8",
        "type": "ui_button",
        "z": "4f13ca8d684be14d",
        "name": "",
        "group": "56160cc0ad9f5e14",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Forzar noche",
        "tooltip": "Si no está en modo automático, pone al nodo en modo noche.",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "brightness_3",
        "payload": "manual night time",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 940,
        "wires": [
            [
                "4138f62c81ccba5c"
            ]
        ]
    },
    {
        "id": "d6225589252ca6dd",
        "type": "ui_text_input",
        "z": "4f13ca8d684be14d",
        "name": "",
        "label": "ID",
        "tooltip": "Identificador del nodo LoRa",
        "group": "56160cc0ad9f5e14",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "a626cdbb7f2557bb"
            ]
        ]
    },
    {
        "id": "a06b8428862580a2",
        "type": "ui_switch",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Debug",
        "tooltip": "",
        "group": "8c09f9139ae0c63c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "ed45ba389f09350b"
            ]
        ]
    },
    {
        "id": "ed45ba389f09350b",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiNaftaDebugMode",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiNaftaDebugMode: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": []
    },
    {
        "id": "bdead77c8e185327",
        "type": "ui_slider",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Porcentaje",
        "tooltip": "",
        "group": "8c09f9139ae0c63c",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "className": "",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "181961277d0b91e4"
            ]
        ]
    },
    {
        "id": "181961277d0b91e4",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiNaftaDebugBase",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiNaftaDebugBase: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "9947e77d6d1cc7c4",
        "type": "ui_button",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "group": "8c09f9139ae0c63c",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "b8a9fcd8f7a4c006"
            ]
        ]
    },
    {
        "id": "b8a9fcd8f7a4c006",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "simular consumo",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nif (msg.payload === \"reset\") {\n    const base = horusAPI.uiNaftaDebugBase;\n    horusAPI = {\n        ...horusAPI,\n        uiNaftaDebugPercentage: base || 50.0\n    }\n} else if (msg.payload === \"consume\") {\n    let actual = horusAPI.uiNaftaDebugPercentage;\n    if (horusAPI.uiNaftaDebugAutoConsume) {\n        actual = actual > 0.1 ? actual - 0.1 : 0.0;\n    }\n    horusAPI = {\n        ...horusAPI,\n        uiNaftaDebugPercentage: actual\n    }\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": []
    },
    {
        "id": "5d8fd1623355d33c",
        "type": "inject",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "consume",
        "payloadType": "str",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "b8a9fcd8f7a4c006"
            ]
        ]
    },
    {
        "id": "21af34b96a659807",
        "type": "ui_switch",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Debug",
        "tooltip": "",
        "group": "fe14c99be0cab520",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "04771260d23a2ff0"
            ]
        ]
    },
    {
        "id": "04771260d23a2ff0",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiGPSDebugMode",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiGPSDebugMode: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 440,
        "wires": []
    },
    {
        "id": "35b5016be38e1116",
        "type": "inject",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "-34.59702",
        "payloadType": "num",
        "x": 230,
        "y": 500,
        "wires": [
            [
                "b38c8cc21d2b0885"
            ]
        ]
    },
    {
        "id": "274c44fe5755cb15",
        "type": "inject",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "-58.60328",
        "payloadType": "num",
        "x": 230,
        "y": 540,
        "wires": [
            [
                "b74b4b0cc42d9a71"
            ]
        ]
    },
    {
        "id": "1ad7019a823923b3",
        "type": "inject",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "4499d8d3d7cc3e46"
            ]
        ]
    },
    {
        "id": "405417cbb25dfe3c",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiGPSDebugLat",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiGPSDebugLat: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 500,
        "wires": []
    },
    {
        "id": "e22a02701e42a6a2",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiGPSDebugLong",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiGPSDebugLong: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 540,
        "wires": []
    },
    {
        "id": "ab533ff1c1a1a839",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiGPSDebugAlt",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiGPSDebugAlt: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": []
    },
    {
        "id": "b38c8cc21d2b0885",
        "type": "ui_text_input",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Latitud",
        "tooltip": "",
        "group": "fe14c99be0cab520",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 500,
        "wires": [
            [
                "405417cbb25dfe3c"
            ]
        ]
    },
    {
        "id": "b74b4b0cc42d9a71",
        "type": "ui_text_input",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Longitud",
        "tooltip": "",
        "group": "fe14c99be0cab520",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 540,
        "wires": [
            [
                "e22a02701e42a6a2"
            ]
        ]
    },
    {
        "id": "4499d8d3d7cc3e46",
        "type": "ui_text_input",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Altitud",
        "tooltip": "",
        "group": "fe14c99be0cab520",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 390,
        "y": 580,
        "wires": [
            [
                "ab533ff1c1a1a839"
            ]
        ]
    },
    {
        "id": "c802d7e1c3f2bcb4",
        "type": "ui_switch",
        "z": "0dcd6c2e7ff4d7de",
        "name": "",
        "label": "Auto consumo",
        "tooltip": "",
        "group": "8c09f9139ae0c63c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "7ecd1b34511c3ab8"
            ]
        ]
    },
    {
        "id": "7ecd1b34511c3ab8",
        "type": "function",
        "z": "0dcd6c2e7ff4d7de",
        "name": "save uiNaftaDebugAutoConsume",
        "func": "let horusAPI = global.get(\"horusAPI\") || {};\nhorusAPI = {\n    ...horusAPI,\n    uiNaftaDebugAutoConsume: msg.payload\n}\nglobal.set(\"horusAPI\", horusAPI);\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": []
    }
]